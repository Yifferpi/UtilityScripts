#!/bin/bash

# TODO: 
# offer to commit all with standard commit message
# config file to ignore certain repos

print_help() {
    cat << EOF
Usage: ${0##*/} [root_dir]
    Find git repositories with pending changes.

    root_dir  directory root for search (default: /home/$USER)

Error: propositional argument missing!
EOF
}

notify=0

if [ $# -ge 1 ]; then
    while getopts ":hc" opt; do
      case $opt in
        h) print_help
           exit 1;;
        c) notify=1;;
        \?)
          # Print an error message
          echo "Invalid option: -$OPTARG" >&2
          print_help
          exit 1
          ;;
      esac
    done
fi


# Set root directory for the search
root_dir="/home/$USER"
skip_dir=".cache"

# Statistics
count_unpushed=0
count_uncommitted=0
count_detachedHead=0
count_noRemote=0

# Find all git repositories under the current directory
for dir in $(find $root_dir -name $skip_dir -prune -o -type d -name ".git" -print); do
    # Go to the root directory of the repository
    cd "${dir%/*}"

    # Check if the current branch is detached
    if [[ $(git rev-parse --abbrev-ref HEAD) == "HEAD" ]]; then
        # The current branch is detached
        # Print the repository's root directory
        echo "Detached: ${dir%/*}"
        ((count_detachedHead++))
    else
        # Check if there are local changes that have not been committed
        if [[ $(git status --porcelain) ]]; then
            # Print the repository's root directory
            echo "Uncommitted: ${dir%/*}"
            ((count_uncommitted++))
        else
            # Check if the current branch is configured to track a remote branch
            upstream=$(git branch -vv | grep '^\*' | awk '{print $4}')
            if [[ -z "$upstream" ]]; then
                # The current branch is not configured to track a remote branch
                # Print the repository's root directory
                echo "No Remote: ${dir%/*}"
                ((count_noRemote++))
            else
                # Check if the repository has any commits that have not been pushed
                if [[ $(git cherry) ]]; then
                    # Print the repository's root directory
                    echo "Unpushed: ${dir%/*}"
                    ((count_unpushed++))
                fi
            fi
        fi
    fi

    # Go back to the original directory
    cd - > /dev/null
done

# Print the summary
echo -e "\n\033[1;4mSummary\033[0m:"
summary="Uncommitted:$count_uncommitted\nUnpushed:$count_unpushed\nNoRemote:$count_noRemote\nDetachedHead:$count_detachedHead"
#echo "$count repositories with unpushed changes"
summary=$(echo -e "$summary" | column -t -s ":")
echo "$summary"

if [ $notify -eq 1 ]; then
    #notify-send -a "gitrepos2push" -u normal -t 30000 -i weather-storm-symbolic "Repos requiring action" "\n$summary\n\nTo list, run gitrepos2push"
    notify-send -a "gitrepos2push" -u normal -w -i weather-storm-symbolic "Repos requiring action" "\n$summary\n\nTo list, run gitrepos2push"
fi
